/* Generated By:JavaCC: Do not edit this line. CParserConstants.java */
package org.codecover.instrumentation.c.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMBER = 12;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 13;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 14;
  /** RegularExpression Id. */
  int HEX_LITERAL = 15;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 16;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 17;
  /** RegularExpression Id. */
  int EXPONENT = 18;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 19;
  /** RegularExpression Id. */
  int STRING_LITERAL = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int VOLATILE = 22;
  /** RegularExpression Id. */
  int REGISTER = 23;
  /** RegularExpression Id. */
  int UNSIGNED = 24;
  /** RegularExpression Id. */
  int TYPEDEF = 25;
  /** RegularExpression Id. */
  int DFLT = 26;
  /** RegularExpression Id. */
  int DOUBLE = 27;
  /** RegularExpression Id. */
  int SIZEOF = 28;
  /** RegularExpression Id. */
  int SWITCH = 29;
  /** RegularExpression Id. */
  int RETURN = 30;
  /** RegularExpression Id. */
  int EXTERN = 31;
  /** RegularExpression Id. */
  int STRUCT = 32;
  /** RegularExpression Id. */
  int STATIC = 33;
  /** RegularExpression Id. */
  int SIGNED = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int BREAK = 36;
  /** RegularExpression Id. */
  int UNION = 37;
  /** RegularExpression Id. */
  int CONST = 38;
  /** RegularExpression Id. */
  int FLOAT = 39;
  /** RegularExpression Id. */
  int SHORT = 40;
  /** RegularExpression Id. */
  int ELSE = 41;
  /** RegularExpression Id. */
  int CASE = 42;
  /** RegularExpression Id. */
  int LONG = 43;
  /** RegularExpression Id. */
  int ENUM = 44;
  /** RegularExpression Id. */
  int AUTO = 45;
  /** RegularExpression Id. */
  int VOID = 46;
  /** RegularExpression Id. */
  int CHAR = 47;
  /** RegularExpression Id. */
  int GOTO = 48;
  /** RegularExpression Id. */
  int FOR = 49;
  /** RegularExpression Id. */
  int INT = 50;
  /** RegularExpression Id. */
  int IF = 51;
  /** RegularExpression Id. */
  int DO = 52;
  /** RegularExpression Id. */
  int IDENTIFIER = 53;
  /** RegularExpression Id. */
  int LETTER = 54;
  /** RegularExpression Id. */
  int DIGIT = 55;
  /** RegularExpression Id. */
  int INC = 56;
  /** RegularExpression Id. */
  int DEC = 57;
  /** RegularExpression Id. */
  int LAND = 58;
  /** RegularExpression Id. */
  int LOR = 59;
  /** RegularExpression Id. */
  int RBL = 60;
  /** RegularExpression Id. */
  int RBR = 61;
  /** RegularExpression Id. */
  int CBL = 62;
  /** RegularExpression Id. */
  int CBR = 63;
  /** RegularExpression Id. */
  int SBL = 64;
  /** RegularExpression Id. */
  int SBR = 65;
  /** RegularExpression Id. */
  int STAR = 66;
  /** RegularExpression Id. */
  int SLASH = 67;
  /** RegularExpression Id. */
  int MOD = 68;
  /** RegularExpression Id. */
  int PLUS = 69;
  /** RegularExpression Id. */
  int MINUS = 70;
  /** RegularExpression Id. */
  int EXCL = 71;
  /** RegularExpression Id. */
  int AMP = 72;
  /** RegularExpression Id. */
  int QEM = 73;
  /** RegularExpression Id. */
  int TILDE = 74;
  /** RegularExpression Id. */
  int CARE = 75;
  /** RegularExpression Id. */
  int PIPE = 76;
  /** RegularExpression Id. */
  int COMMA = 77;
  /** RegularExpression Id. */
  int SEMICOLON = 78;
  /** RegularExpression Id. */
  int COLON = 79;
  /** RegularExpression Id. */
  int ASSIGNMENT = 80;
  /** RegularExpression Id. */
  int DOT = 81;
  /** RegularExpression Id. */
  int LESS = 82;
  /** RegularExpression Id. */
  int GREATER = 83;
  /** RegularExpression Id. */
  int ELLIPSIS = 84;
  /** RegularExpression Id. */
  int MULT_EQ = 85;
  /** RegularExpression Id. */
  int DIV_EQ = 86;
  /** RegularExpression Id. */
  int MOD_EQ = 87;
  /** RegularExpression Id. */
  int PLUS_EQ = 88;
  /** RegularExpression Id. */
  int SUB_EQ = 89;
  /** RegularExpression Id. */
  int LSH_EQ = 90;
  /** RegularExpression Id. */
  int RSH_EQ = 91;
  /** RegularExpression Id. */
  int AND_EQ = 92;
  /** RegularExpression Id. */
  int XOR_EQ = 93;
  /** RegularExpression Id. */
  int OR_EQ = 94;
  /** RegularExpression Id. */
  int EQ = 95;
  /** RegularExpression Id. */
  int NE = 96;
  /** RegularExpression Id. */
  int LE = 97;
  /** RegularExpression Id. */
  int GE = 98;
  /** RegularExpression Id. */
  int LSH = 99;
  /** RegularExpression Id. */
  int RSH = 100;
  /** RegularExpression Id. */
  int ARROW = 101;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"#\"",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 11>",
    "<NUMBER>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"continue\"",
    "\"volatile\"",
    "\"register\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"sizeof\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"struct\"",
    "\"static\"",
    "\"signed\"",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "\"const\"",
    "\"float\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "\"char\"",
    "\"goto\"",
    "\"for\"",
    "\"int\"",
    "\"if\"",
    "\"do\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"++\"",
    "\"--\"",
    "\"&&\"",
    "\"||\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+\"",
    "\"-\"",
    "\"!\"",
    "\"&\"",
    "\"?\"",
    "\"~\"",
    "\"^\"",
    "\"|\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\".\"",
    "\"<\"",
    "\">\"",
    "\"...\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"->\"",
  };

}
