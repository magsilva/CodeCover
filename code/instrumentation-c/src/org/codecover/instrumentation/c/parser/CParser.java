/* Generated By:JavaCC: Do not edit this line. CParser.java */
package org.codecover.instrumentation.c.parser;

import java.util.*;
import org.codecover.instrumentation.c.syntaxtree.*;
import java.util.Vector;


public class CParser implements CParserConstants {
   private Set<String> types = new HashSet<String>();
   private Stack<Boolean> typedefParsingStack = new Stack<Boolean>();
   private boolean isType(String type)
   {
      return types.contains(type);
   }
   private void addType(String type)
   {
      types.add(type);
   }
   private void printTypes()
   {
      for ( Iterator i = types.iterator(); i.hasNext();  )
      {
         System.out.println(i.next());
      }
   }
   public static void main(String args[])
   {
      CParser parser;
      if ( args.length == 0 )
      {
         System.out.println("C Parser Version 0.1Alpha:  Reading from standard input . . .");
         parser = new CParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("C Parser Version 0.1Alpha:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new CParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("C Parser Version 0.1:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("C Parser Version 0.1Alpha:  Usage is one of:");
            System.out.println("         java CParser < inputfile");
            System.out.println("OR");
            System.out.println("         java CParser inputfile");
            return;
         }
      try
      {
         parser.TranslationUnit();
         System.out.println("C Parser Version 0.1Alpha:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println("C Parser Version 0.1Alpha:  Encountered errors during parse.");
         e.printStackTrace();
      }
   }

  final public TranslationUnit TranslationUnit() throws ParseException {
   NodeList n0 = new NodeList();
   ExternalDeclaration n1;
    label_1:
    while (true) {
      n1 = ExternalDeclaration();
        n0.addNode(n1);
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new TranslationUnit(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalDeclaration ExternalDeclaration() throws ParseException {
   NodeChoice n0;
   FunctionDefinition n1;
   Declaration n2;
    if (jj_2_2(2147483647)) {
      n1 = FunctionDefinition();
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_3(1)) {
      n2 = Declaration();
           n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExternalDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDefinition FunctionDefinition() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;
    if (jj_2_4(2147483647)) {
      n1 = DeclarationSpecifiers();
        n0.addNode(n1);
    } else {
      ;
    }
    n2 = Declarator();
    if (jj_2_5(1)) {
      n4 = DeclarationList();
        n3.addNode(n4);
    } else {
      ;
    }
    n5 = CompoundStatement();
     {if (true) return new FunctionDefinition(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration Declaration() throws ParseException {
   DeclarationSpecifiers n0;
   NodeOptional n1 = new NodeOptional();
   InitDeclaratorList n2;
   NodeToken n3;
   Token n4;
    n0 = DeclarationSpecifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case RBL:
    case STAR:
      n2 = InitDeclaratorList();
        n1.addNode(n2);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Declaration(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public DeclarationList DeclarationList() throws ParseException {
   NodeList n0 = new NodeList();
   Declaration n1;
    label_2:
    while (true) {
      n1 = Declaration();
        n0.addNode(n1);
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_2;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new DeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DeclarationSpecifiers DeclarationSpecifiers() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   StorageClassSpecifier n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationSpecifiers n4;
   NodeSequence n5;
   TypeSpecifier n6;
   NodeOptional n7 = new NodeOptional();
   DeclarationSpecifiers n8;
   NodeSequence n9;
   TypeQualifier n10;
   NodeOptional n11 = new NodeOptional();
   DeclarationSpecifiers n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
    case TYPEDEF:
    case EXTERN:
    case STATIC:
    case AUTO:
        n1 = new NodeSequence(2);
      n2 = StorageClassSpecifier();
        n1.addNode(n2);
      if (jj_2_7(2147483647)) {
        n4 = DeclarationSpecifiers();
           n3.addNode(n4);
      } else {
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_10(1)) {
        n5 = new NodeSequence(2);
        n6 = TypeSpecifier();
        n5.addNode(n6);
        if (jj_2_8(2147483647)) {
          n8 = DeclarationSpecifiers();
           n7.addNode(n8);
        } else {
          ;
        }
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
        n9 = new NodeSequence(2);
          n10 = TypeQualifier();
        n9.addNode(n10);
          if (jj_2_9(2147483647)) {
            n12 = DeclarationSpecifiers();
           n11.addNode(n12);
          } else {
            ;
          }
        n9.addNode(n11);
        n0 = new NodeChoice(n9, 2);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new DeclarationSpecifiers(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StorageClassSpecifier StorageClassSpecifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      n2 = jj_consume_token(AUTO);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case REGISTER:
      n4 = jj_consume_token(REGISTER);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case STATIC:
      n6 = jj_consume_token(STATIC);
                       n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case EXTERN:
      n8 = jj_consume_token(EXTERN);
                       n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case TYPEDEF:
      n10 = jj_consume_token(TYPEDEF);
                         n9 = JTBToolkit.makeNodeToken(n10);
            typedefParsingStack.push(Boolean.TRUE);
           n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StorageClassSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeSpecifier TypeSpecifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   StructOrUnionSpecifier n19;
   EnumSpecifier n20;
   TypedefName n21;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n2 = jj_consume_token(VOID);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CHAR:
      n4 = jj_consume_token(CHAR);
                     n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case SHORT:
      n6 = jj_consume_token(SHORT);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case INT:
      n8 = jj_consume_token(INT);
                    n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case LONG:
      n10 = jj_consume_token(LONG);
                      n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case FLOAT:
      n12 = jj_consume_token(FLOAT);
                       n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case DOUBLE:
      n14 = jj_consume_token(DOUBLE);
                        n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case SIGNED:
      n16 = jj_consume_token(SIGNED);
                        n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case UNSIGNED:
      n18 = jj_consume_token(UNSIGNED);
                          n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case STRUCT:
    case UNION:
      n19 = StructOrUnionSpecifier();
           n0 = new NodeChoice(n19, 9);
      break;
    case ENUM:
      n20 = EnumSpecifier();
           n0 = new NodeChoice(n20, 10);
      break;
    default:
      jj_la1[4] = jj_gen;
      if (isType(getToken(1).image)) {
        n21 = TypedefName();
           n0 = new NodeChoice(n21, 11);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new TypeSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeQualifier TypeQualifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      n2 = jj_consume_token(CONST);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case VOLATILE:
      n4 = jj_consume_token(VOLATILE);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeQualifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnionSpecifier StructOrUnionSpecifier() throws ParseException {
   StructOrUnion n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   StructDeclarationList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
      typedefParsingStack.push(Boolean.FALSE);
    n0 = StructOrUnion();
    if (jj_2_11(3)) {
           n2 = new NodeSequence(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n5 = jj_consume_token(IDENTIFIER);
                              n4 = JTBToolkit.makeNodeToken(n5);
              n3.addNode(n4);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
           n2.addNode(n3);
      n7 = jj_consume_token(CBL);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n2.addNode(n6);
      n8 = StructDeclarationList();
           n2.addNode(n8);
      n10 = jj_consume_token(CBR);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n2.addNode(n9);
           n1 = new NodeChoice(n2, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n12 = jj_consume_token(IDENTIFIER);
                            n11 = JTBToolkit.makeNodeToken(n12);
           n1 = new NodeChoice(n11, 1);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      typedefParsingStack.pop();
     {if (true) return new StructOrUnionSpecifier(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnion StructOrUnion() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      n2 = jj_consume_token(STRUCT);
                       n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case UNION:
      n4 = jj_consume_token(UNION);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StructOrUnion(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclarationList StructDeclarationList() throws ParseException {
   NodeList n0 = new NodeList();
   StructDeclaration n1;
    label_3:
    while (true) {
      n1 = StructDeclaration();
        n0.addNode(n1);
      if (jj_2_12(1)) {
        ;
      } else {
        break label_3;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new StructDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InitDeclaratorList InitDeclaratorList() throws ParseException {
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;
    n0 = InitDeclarator();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InitDeclarator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
      if ( !(typedefParsingStack.empty()) && (typedefParsingStack.peek()).booleanValue() )
      {
         typedefParsingStack.pop();
      }
     {if (true) return new InitDeclaratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public InitDeclarator InitDeclarator() throws ParseException {
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;
    n0 = Declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGNMENT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Initializer();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
     {if (true) return new InitDeclarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclaration StructDeclaration() throws ParseException {
   SpecifierQualifierList n0;
   StructDeclaratorList n1;
   NodeToken n2;
   Token n3;
    n0 = SpecifierQualifierList();
    n1 = StructDeclaratorList();
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new StructDeclaration(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SpecifierQualifierList SpecifierQualifierList() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   TypeSpecifier n2;
   NodeOptional n3 = new NodeOptional();
   SpecifierQualifierList n4;
   NodeSequence n5;
   TypeQualifier n6;
   NodeOptional n7 = new NodeOptional();
   SpecifierQualifierList n8;
    if (jj_2_15(1)) {
        n1 = new NodeSequence(2);
      n2 = TypeSpecifier();
        n1.addNode(n2);
      if (jj_2_13(2147483647)) {
        n4 = SpecifierQualifierList();
           n3.addNode(n4);
      } else {
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n5 = new NodeSequence(2);
        n6 = TypeQualifier();
        n5.addNode(n6);
        if (jj_2_14(2147483647)) {
          n8 = SpecifierQualifierList();
           n7.addNode(n8);
        } else {
          ;
        }
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new SpecifierQualifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclaratorList StructDeclaratorList() throws ParseException {
   StructDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StructDeclarator n5;
    n0 = StructDeclarator();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = StructDeclarator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new StructDeclaratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclarator StructDeclarator() throws ParseException {
   NodeChoice n0;
   Declarator n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Declarator n4;
   NodeToken n5;
   Token n6;
   ConstantExpression n7;
    if (jj_2_16(3)) {
      n1 = Declarator();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case RBL:
      case STAR:
      case COLON:
           n2 = new NodeSequence(3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case RBL:
        case STAR:
          n4 = Declarator();
              n3.addNode(n4);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
           n2.addNode(n3);
        n6 = jj_consume_token(COLON);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n2.addNode(n5);
        n7 = ConstantExpression();
           n2.addNode(n7);
           n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new StructDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EnumSpecifier EnumSpecifier() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   EnumeratorList n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(ENUM);
               n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_17(3)) {
           n3 = new NodeSequence(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n6 = jj_consume_token(IDENTIFIER);
                              n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
           n3.addNode(n4);
      n8 = jj_consume_token(CBL);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
      n9 = EnumeratorList();
           n3.addNode(n9);
      n11 = jj_consume_token(CBR);
                   n10 = JTBToolkit.makeNodeToken(n11);
           n3.addNode(n10);
           n2 = new NodeChoice(n3, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n13 = jj_consume_token(IDENTIFIER);
                            n12 = JTBToolkit.makeNodeToken(n13);
           n2 = new NodeChoice(n12, 1);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new EnumSpecifier(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public EnumeratorList EnumeratorList() throws ParseException {
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;
    n0 = Enumerator();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Enumerator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new EnumeratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Enumerator Enumerator() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(ASSIGNMENT);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = ConstantExpression();
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
     {if (true) return new Enumerator(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Declarator Declarator() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      n1 = Pointer();
        n0.addNode(n1);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    n2 = DirectDeclarator();
     {if (true) return new Declarator(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public DirectDeclarator DirectDeclarator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   ConstantExpression n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterTypeList n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   IdentifierList n28;
   NodeToken n29;
   Token n30;

   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = t = jj_consume_token(IDENTIFIER);
                          n1 = JTBToolkit.makeNodeToken(n2);
            if ( !(typedefParsingStack.empty()) && (typedefParsingStack.peek()).booleanValue() )
            {
               addType(t.image);
            }
           n0 = new NodeChoice(n1, 0);
      break;
    case RBL:
           n3 = new NodeSequence(3);
      n5 = jj_consume_token(RBL);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      n6 = Declarator();
           n3.addNode(n6);
      n8 = jj_consume_token(RBR);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      typedefParsingStack.push(Boolean.FALSE);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBL:
      case SBL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
        n14 = new NodeOptional();
        n27 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SBL:
           n11 = new NodeSequence(3);
        n13 = jj_consume_token(SBL);
                   n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case INC:
        case DEC:
        case RBL:
        case STAR:
        case PLUS:
        case MINUS:
        case EXCL:
        case AMP:
        case TILDE:
          n15 = ConstantExpression();
              n14.addNode(n15);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
           n11.addNode(n14);
        n17 = jj_consume_token(SBR);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n11.addNode(n16);
           n10 = new NodeChoice(n11, 0);
        break;
      default:
        jj_la1[24] = jj_gen;
        if (jj_2_18(3)) {
           n18 = new NodeSequence(4);
          n20 = jj_consume_token(RBL);
                   n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
          n21 = ParameterTypeList();
           n18.addNode(n21);
          n23 = jj_consume_token(RBR);
                   n22 = JTBToolkit.makeNodeToken(n23);
           n18.addNode(n22);
           n10 = new NodeChoice(n18, 1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RBL:
           n24 = new NodeSequence(3);
            n26 = jj_consume_token(RBL);
                   n25 = JTBToolkit.makeNodeToken(n26);
           n24.addNode(n25);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              n28 = IdentifierList();
              n27.addNode(n28);
              break;
            default:
              jj_la1[23] = jj_gen;
              ;
            }
           n24.addNode(n27);
            n30 = jj_consume_token(RBR);
                   n29 = JTBToolkit.makeNodeToken(n30);
           n24.addNode(n29);
           n10 = new NodeChoice(n24, 2);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
      typedefParsingStack.pop();
     {if (true) return new DirectDeclarator(n0,n9);}
    throw new Error("Missing return statement in function");
  }

  final public Pointer Pointer() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeQualifierList n3;
   NodeOptional n4 = new NodeOptional();
   Pointer n5;
    n1 = jj_consume_token(STAR);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOLATILE:
    case CONST:
      n3 = TypeQualifierList();
        n2.addNode(n3);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      n5 = Pointer();
        n4.addNode(n5);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
     {if (true) return new Pointer(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TypeQualifierList TypeQualifierList() throws ParseException {
   NodeList n0 = new NodeList();
   TypeQualifier n1;
    label_8:
    while (true) {
      n1 = TypeQualifier();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new TypeQualifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterTypeList ParameterTypeList() throws ParseException {
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n0 = ParameterList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(ELLIPSIS);
                            n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
     {if (true) return new ParameterTypeList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList ParameterList() throws ParseException {
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;
    n0 = ParameterDeclaration();
    label_9:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_9;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ParameterDeclaration();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclaration ParameterDeclaration() throws ParseException {
   DeclarationSpecifiers n0;
   NodeChoice n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   AbstractDeclarator n4;
    n0 = DeclarationSpecifiers();
    if (jj_2_20(2147483647)) {
      n2 = Declarator();
           n1 = new NodeChoice(n2, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBL:
      case SBL:
      case STAR:
        n4 = AbstractDeclarator();
              n3.addNode(n4);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
           n1 = new NodeChoice(n3, 1);
    }
     {if (true) return new ParameterDeclaration(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public IdentifierList IdentifierList() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
   NodeChoice n0;
   AssignmentExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitializerList n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case SIZEOF:
    case IDENTIFIER:
    case INC:
    case DEC:
    case RBL:
    case STAR:
    case PLUS:
    case MINUS:
    case EXCL:
    case AMP:
    case TILDE:
      n1 = AssignmentExpression();
           n0 = new NodeChoice(n1, 0);
      break;
    case CBL:
           n2 = new NodeSequence(4);
      n4 = jj_consume_token(CBL);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
      n5 = InitializerList();
           n2.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n8 = jj_consume_token(COMMA);
                     n7 = JTBToolkit.makeNodeToken(n8);
              n6.addNode(n7);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
           n2.addNode(n6);
      n10 = jj_consume_token(CBR);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n2.addNode(n9);
           n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Initializer(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InitializerList InitializerList() throws ParseException {
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;
    n0 = Initializer();
    label_11:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_11;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Initializer();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new InitializerList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public TypeName TypeName() throws ParseException {
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;
    n0 = SpecifierQualifierList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBL:
    case SBL:
    case STAR:
      n2 = AbstractDeclarator();
        n1.addNode(n2);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
     {if (true) return new TypeName(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AbstractDeclarator AbstractDeclarator() throws ParseException {
   NodeChoice n0;
   Pointer n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Pointer n4;
   DirectAbstractDeclarator n5;
    if (jj_2_22(3)) {
      n1 = Pointer();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBL:
      case SBL:
      case STAR:
           n2 = new NodeSequence(2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          n4 = Pointer();
              n3.addNode(n4);
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
           n2.addNode(n3);
        n5 = DirectAbstractDeclarator();
           n2.addNode(n5);
           n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AbstractDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DirectAbstractDeclarator DirectAbstractDeclarator() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   AbstractDeclarator n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ConstantExpression n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ParameterTypeList n18;
   NodeToken n19;
   Token n20;
   NodeListOptional n21 = new NodeListOptional();
   NodeChoice n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   ConstantExpression n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   ParameterTypeList n34;
   NodeToken n35;
   Token n36;
    if (jj_2_24(2)) {
           n1 = new NodeSequence(4);
      n3 = jj_consume_token(RBL);
                  n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = AbstractDeclarator();
           n1.addNode(n4);
      n6 = jj_consume_token(RBR);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SBL:
           n7 = new NodeSequence(3);
        n9 = jj_consume_token(SBL);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case INC:
        case DEC:
        case RBL:
        case STAR:
        case PLUS:
        case MINUS:
        case EXCL:
        case AMP:
        case TILDE:
          n11 = ConstantExpression();
              n10.addNode(n11);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
           n7.addNode(n10);
        n13 = jj_consume_token(SBR);
                   n12 = JTBToolkit.makeNodeToken(n13);
           n7.addNode(n12);
           n0 = new NodeChoice(n7, 1);
        break;
      case RBL:
           n14 = new NodeSequence(3);
        n16 = jj_consume_token(RBL);
                   n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        if (jj_2_23(1)) {
          n18 = ParameterTypeList();
              n17.addNode(n18);
        } else {
          ;
        }
           n14.addNode(n17);
        n20 = jj_consume_token(RBR);
                   n19 = JTBToolkit.makeNodeToken(n20);
           n14.addNode(n19);
           n0 = new NodeChoice(n14, 2);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBL:
      case SBL:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_12;
      }
        n26 = new NodeOptional();
        n33 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SBL:
           n23 = new NodeSequence(3);
        n25 = jj_consume_token(SBL);
                   n24 = JTBToolkit.makeNodeToken(n25);
           n23.addNode(n24);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case INC:
        case DEC:
        case RBL:
        case STAR:
        case PLUS:
        case MINUS:
        case EXCL:
        case AMP:
        case TILDE:
          n27 = ConstantExpression();
              n26.addNode(n27);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
           n23.addNode(n26);
        n29 = jj_consume_token(SBR);
                   n28 = JTBToolkit.makeNodeToken(n29);
           n23.addNode(n28);
           n22 = new NodeChoice(n23, 0);
        break;
      case RBL:
           n30 = new NodeSequence(3);
        n32 = jj_consume_token(RBL);
                   n31 = JTBToolkit.makeNodeToken(n32);
           n30.addNode(n31);
        if (jj_2_25(1)) {
          n34 = ParameterTypeList();
              n33.addNode(n34);
        } else {
          ;
        }
           n30.addNode(n33);
        n36 = jj_consume_token(RBR);
                   n35 = JTBToolkit.makeNodeToken(n36);
           n30.addNode(n35);
           n22 = new NodeChoice(n30, 1);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n21.addNode(n22);
    }
     n21.nodes.trimToSize();
     {if (true) return new DirectAbstractDeclarator(n0,n21);}
    throw new Error("Missing return statement in function");
  }

  final public TypedefName TypedefName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TypedefName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   LabeledStatement n1;
   ExpressionStatement n2;
   CompoundStatement n3;
   SelectionStatement n4;
   IterationStatement n5;
   JumpStatement n6;
    if (jj_2_26(2)) {
      n1 = LabeledStatement();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
      case SEMICOLON:
        n2 = ExpressionStatement();
           n0 = new NodeChoice(n2, 1);
        break;
      case CBL:
        n3 = CompoundStatement();
           n0 = new NodeChoice(n3, 2);
        break;
      case SWITCH:
      case IF:
        n4 = SelectionStatement();
           n0 = new NodeChoice(n4, 3);
        break;
      case WHILE:
      case FOR:
      case DO:
        n5 = IterationStatement();
           n0 = new NodeChoice(n5, 4);
        break;
      case CONTINUE:
      case RETURN:
      case BREAK:
      case GOTO:
        n6 = JumpStatement();
           n0 = new NodeChoice(n6, 5);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Statement n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   ConstantExpression n10;
   NodeToken n11;
   Token n12;
   Statement n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Statement n19;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
           n1 = new NodeSequence(3);
      n3 = jj_consume_token(IDENTIFIER);
                           n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(COLON);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n6 = Statement();
           n1.addNode(n6);
           n0 = new NodeChoice(n1, 0);
      break;
    case CASE:
           n7 = new NodeSequence(4);
      n9 = jj_consume_token(CASE);
                     n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
      n10 = ConstantExpression();
           n7.addNode(n10);
      n12 = jj_consume_token(COLON);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n7.addNode(n11);
      n13 = Statement();
           n7.addNode(n13);
           n0 = new NodeChoice(n7, 1);
      break;
    case DFLT:
           n14 = new NodeSequence(3);
      n16 = jj_consume_token(DFLT);
                      n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
      n18 = jj_consume_token(COLON);
                   n17 = JTBToolkit.makeNodeToken(n18);
           n14.addNode(n17);
      n19 = Statement();
           n14.addNode(n19);
           n0 = new NodeChoice(n14, 2);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LabeledStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement ExpressionStatement() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case SIZEOF:
    case IDENTIFIER:
    case INC:
    case DEC:
    case RBL:
    case STAR:
    case PLUS:
    case MINUS:
    case EXCL:
    case AMP:
    case TILDE:
      n1 = Expression();
        n0.addNode(n1);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ExpressionStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public CompoundStatement CompoundStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeclarationList n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(CBL);
            n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_27(2147483647)) {
      n3 = DeclarationList();
        n2.addNode(n3);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case CONTINUE:
    case DFLT:
    case SIZEOF:
    case SWITCH:
    case RETURN:
    case WHILE:
    case BREAK:
    case CASE:
    case GOTO:
    case FOR:
    case IF:
    case DO:
    case IDENTIFIER:
    case INC:
    case DEC:
    case RBL:
    case CBL:
    case STAR:
    case PLUS:
    case MINUS:
    case EXCL:
    case AMP:
    case TILDE:
    case SEMICOLON:
      n5 = StatementList();
        n4.addNode(n5);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    n7 = jj_consume_token(CBR);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new CompoundStatement(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList StatementList() throws ParseException {
   NodeList n0 = new NodeList();
   Statement n1;
    label_13:
    while (true) {
      n1 = Statement();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case DFLT:
      case SIZEOF:
      case SWITCH:
      case RETURN:
      case WHILE:
      case BREAK:
      case CASE:
      case GOTO:
      case FOR:
      case IF:
      case DO:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case CBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_13;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelectionStatement SelectionStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   Statement n9;
   NodeOptional n10 = new NodeOptional();
   ElseStatement n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   Expression n17;
   NodeToken n18;
   Token n19;
   Statement n20;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
              n1 = new NodeSequence(6);
      n3 = jj_consume_token(IF);
                      n2 = JTBToolkit.makeNodeToken(n3);
              n1.addNode(n2);
      n5 = jj_consume_token(RBL);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n1.addNode(n4);
      n6 = Expression();
              n1.addNode(n6);
      n8 = jj_consume_token(RBR);
                     n7 = JTBToolkit.makeNodeToken(n8);
              n1.addNode(n7);
      n9 = Statement();
              n1.addNode(n9);
      if (jj_2_28(2)) {
        n11 = ElseStatement();
                 n10.addNode(n11);
      } else {
        ;
      }
              n1.addNode(n10);
           n0 = new NodeChoice(n1, 0);
      break;
    case SWITCH:
           n12 = new NodeSequence(5);
      n14 = jj_consume_token(SWITCH);
                        n13 = JTBToolkit.makeNodeToken(n14);
           n12.addNode(n13);
      n16 = jj_consume_token(RBL);
                   n15 = JTBToolkit.makeNodeToken(n16);
           n12.addNode(n15);
      n17 = Expression();
           n12.addNode(n17);
      n19 = jj_consume_token(RBR);
                   n18 = JTBToolkit.makeNodeToken(n19);
           n12.addNode(n18);
      n20 = Statement();
           n12.addNode(n20);
           n0 = new NodeChoice(n12, 1);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SelectionStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ElseStatement ElseStatement() throws ParseException {
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   Statement n3;
        n0 = new NodeSequence(2);
    n2 = jj_consume_token(ELSE);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    n3 = Statement();
        n0.addNode(n3);
     {if (true) return new ElseStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IterationStatement IterationStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   Statement n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Statement n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   Expression n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32 = new NodeOptional();
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   Expression n37;
   NodeToken n38;
   Token n39;
   Statement n40;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
           n1 = new NodeSequence(5);
      n3 = jj_consume_token(WHILE);
                      n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(RBL);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n6 = Expression();
           n1.addNode(n6);
      n8 = jj_consume_token(RBR);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n1.addNode(n7);
      n9 = Statement();
           n1.addNode(n9);
           n0 = new NodeChoice(n1, 0);
      break;
    case DO:
           n10 = new NodeSequence(7);
      n12 = jj_consume_token(DO);
                    n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
      n13 = Statement();
           n10.addNode(n13);
      n15 = jj_consume_token(WHILE);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n10.addNode(n14);
      n17 = jj_consume_token(RBL);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n10.addNode(n16);
      n18 = Expression();
           n10.addNode(n18);
      n20 = jj_consume_token(RBR);
                   n19 = JTBToolkit.makeNodeToken(n20);
           n10.addNode(n19);
      n22 = jj_consume_token(SEMICOLON);
                   n21 = JTBToolkit.makeNodeToken(n22);
           n10.addNode(n21);
           n0 = new NodeChoice(n10, 1);
      break;
    case FOR:
           n23 = new NodeSequence(9);
      n25 = jj_consume_token(FOR);
                     n24 = JTBToolkit.makeNodeToken(n25);
           n23.addNode(n24);
      n27 = jj_consume_token(RBL);
                   n26 = JTBToolkit.makeNodeToken(n27);
           n23.addNode(n26);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
        n29 = Expression();
              n28.addNode(n29);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
           n23.addNode(n28);
      n31 = jj_consume_token(SEMICOLON);
                   n30 = JTBToolkit.makeNodeToken(n31);
           n23.addNode(n30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
        n33 = Expression();
              n32.addNode(n33);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
           n23.addNode(n32);
      n35 = jj_consume_token(SEMICOLON);
                   n34 = JTBToolkit.makeNodeToken(n35);
           n23.addNode(n34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
        n37 = Expression();
              n36.addNode(n37);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
           n23.addNode(n36);
      n39 = jj_consume_token(RBR);
                   n38 = JTBToolkit.makeNodeToken(n39);
           n23.addNode(n38);
      n40 = Statement();
           n23.addNode(n40);
           n0 = new NodeChoice(n23, 2);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IterationStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public JumpStatement JumpStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   Expression n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
           n1 = new NodeSequence(3);
      n3 = jj_consume_token(GOTO);
                     n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(IDENTIFIER);
                           n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n7 = jj_consume_token(SEMICOLON);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n1.addNode(n6);
           n0 = new NodeChoice(n1, 0);
      break;
    case CONTINUE:
           n8 = new NodeSequence(2);
      n10 = jj_consume_token(CONTINUE);
                          n9 = JTBToolkit.makeNodeToken(n10);
           n8.addNode(n9);
      n12 = jj_consume_token(SEMICOLON);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n8.addNode(n11);
           n0 = new NodeChoice(n8, 1);
      break;
    case BREAK:
           n13 = new NodeSequence(2);
      n15 = jj_consume_token(BREAK);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
      n17 = jj_consume_token(SEMICOLON);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n13.addNode(n16);
           n0 = new NodeChoice(n13, 2);
      break;
    case RETURN:
           n18 = new NodeSequence(3);
      n20 = jj_consume_token(RETURN);
                        n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
        n22 = Expression();
              n21.addNode(n22);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
           n18.addNode(n21);
      n24 = jj_consume_token(SEMICOLON);
                   n23 = JTBToolkit.makeNodeToken(n24);
           n18.addNode(n23);
           n0 = new NodeChoice(n18, 3);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new JumpStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
    n0 = AssignmentExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_14;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentExpression AssignmentExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   ConditionalExpression n5;
    if (jj_2_29(2147483647)) {
        n1 = new NodeSequence(4);
      n2 = UnaryExpression();
        n1.addNode(n2);
      n3 = AssignmentOperator();
        n1.addNode(n3);
      n4 = AssignmentExpression();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_30(3)) {
      n5 = ConditionalExpression();
        n0 = new NodeChoice(n5, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
      n2 = jj_consume_token(ASSIGNMENT);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MULT_EQ:
      n4 = jj_consume_token(MULT_EQ);
                             n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case DIV_EQ:
      n6 = jj_consume_token(DIV_EQ);
                            n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case MOD_EQ:
      n8 = jj_consume_token(MOD_EQ);
                            n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case PLUS_EQ:
      n10 = jj_consume_token(PLUS_EQ);
                              n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case SUB_EQ:
      n12 = jj_consume_token(SUB_EQ);
                             n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case LSH_EQ:
      n14 = jj_consume_token(LSH_EQ);
                              n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case RSH_EQ:
      n16 = jj_consume_token(RSH_EQ);
                              n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case AND_EQ:
      n18 = jj_consume_token(AND_EQ);
                             n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case XOR_EQ:
      n20 = jj_consume_token(XOR_EQ);
                             n19 = JTBToolkit.makeNodeToken(n20);
           n0 = new NodeChoice(n19, 9);
      break;
    case OR_EQ:
      n22 = jj_consume_token(OR_EQ);
                            n21 = JTBToolkit.makeNodeToken(n22);
           n0 = new NodeChoice(n21, 10);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   ConditionalExpression n8;
    n0 = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QEM:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(QEM);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n7 = jj_consume_token(COLON);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n8 = ConditionalExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
     {if (true) return new ConditionalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ConstantExpression ConstantExpression() throws ParseException {
   ConditionalExpression n0;
    n0 = ConditionalExpression();
     {if (true) return new ConstantExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalORExpression LogicalORExpression() throws ParseException {
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;
    n0 = LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOR:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(LOR);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
     {if (true) return new LogicalORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalANDExpression LogicalANDExpression() throws ParseException {
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;
    n0 = InclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAND:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(LAND);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalANDExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
     {if (true) return new LogicalANDExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public InclusiveORExpression InclusiveORExpression() throws ParseException {
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;
    n0 = ExclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PIPE:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(PIPE);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InclusiveORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
     {if (true) return new InclusiveORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveORExpression ExclusiveORExpression() throws ParseException {
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;
    n0 = ANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CARE:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(CARE);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExclusiveORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
     {if (true) return new ExclusiveORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ANDExpression ANDExpression() throws ParseException {
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;
    n0 = EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMP:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(AMP);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ANDExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
     {if (true) return new ANDExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   EqualityExpression n8;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NE:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        n5 = jj_consume_token(EQ);
                           n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case NE:
        n7 = jj_consume_token(NE);
                           n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = EqualityExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   RelationalExpression n12;
    n0 = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
    case GREATER:
    case LE:
    case GE:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        n5 = jj_consume_token(LESS);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case GREATER:
        n7 = jj_consume_token(GREATER);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case LE:
        n9 = jj_consume_token(LE);
                           n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      case GE:
        n11 = jj_consume_token(GE);
                            n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n12 = RelationalExpression();
        n2.addNode(n12);
        n1.addNode(n2);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
     {if (true) return new RelationalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ShiftExpression n8;
    n0 = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSH:
    case RSH:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSH:
        n5 = jj_consume_token(LSH);
                            n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case RSH:
        n7 = jj_consume_token(RSH);
                            n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = ShiftExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
     {if (true) return new ShiftExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AdditiveExpression n8;
    n0 = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n5 = jj_consume_token(PLUS);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case MINUS:
        n7 = jj_consume_token(MINUS);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = AdditiveExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
     {if (true) return new AdditiveExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   MultiplicativeExpression n10;
    n0 = CastExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case SLASH:
    case MOD:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        n5 = jj_consume_token(STAR);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case SLASH:
        n7 = jj_consume_token(SLASH);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case MOD:
        n9 = jj_consume_token(MOD);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = MultiplicativeExpression();
        n2.addNode(n10);
        n1.addNode(n2);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
     {if (true) return new MultiplicativeExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   TypeName n4;
   NodeToken n5;
   Token n6;
   CastExpression n7;
   UnaryExpression n8;
    if (jj_2_31(2147483647)) {
           n1 = new NodeSequence(5);
      n3 = jj_consume_token(RBL);
                  n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = TypeName();
           n1.addNode(n4);
      n6 = jj_consume_token(RBR);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
      n7 = CastExpression();
           n1.addNode(n7);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case INC:
      case DEC:
      case RBL:
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
        n8 = UnaryExpression();
           n0 = new NodeChoice(n8, 1);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
   NodeChoice n0;
   PostfixExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   UnaryExpression n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   UnaryExpression n9;
   NodeSequence n10;
   UnaryOperator n11;
   CastExpression n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeChoice n16;
   UnaryExpression n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   TypeName n21;
   NodeToken n22;
   Token n23;
    if (jj_2_33(3)) {
      n1 = PostfixExpression();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
           n2 = new NodeSequence(2);
        n4 = jj_consume_token(INC);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
        n5 = UnaryExpression();
           n2.addNode(n5);
           n0 = new NodeChoice(n2, 1);
        break;
      case DEC:
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(DEC);
                   n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = UnaryExpression();
           n6.addNode(n9);
           n0 = new NodeChoice(n6, 2);
        break;
      case STAR:
      case PLUS:
      case MINUS:
      case EXCL:
      case AMP:
      case TILDE:
           n10 = new NodeSequence(2);
        n11 = UnaryOperator();
           n10.addNode(n11);
        n12 = CastExpression();
           n10.addNode(n12);
           n0 = new NodeChoice(n10, 3);
        break;
      case SIZEOF:
           n13 = new NodeSequence(2);
        n15 = jj_consume_token(SIZEOF);
                        n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
        if (jj_2_32(2147483647)) {
          n17 = UnaryExpression();
                 n16 = new NodeChoice(n17, 0);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RBL:
                 n18 = new NodeSequence(3);
            n20 = jj_consume_token(RBL);
                         n19 = JTBToolkit.makeNodeToken(n20);
                 n18.addNode(n19);
            n21 = TypeName();
                 n18.addNode(n21);
            n23 = jj_consume_token(RBR);
                         n22 = JTBToolkit.makeNodeToken(n23);
                 n18.addNode(n22);
                 n16 = new NodeChoice(n18, 1);
            break;
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
           n13.addNode(n16);
           n0 = new NodeChoice(n13, 4);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryOperator UnaryOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMP:
      n2 = jj_consume_token(AMP);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case STAR:
      n4 = jj_consume_token(STAR);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case PLUS:
      n6 = jj_consume_token(PLUS);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case MINUS:
      n8 = jj_consume_token(MINUS);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case TILDE:
      n10 = jj_consume_token(TILDE);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case EXCL:
      n12 = jj_consume_token(EXCL);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnaryOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   ArgumentExpressionList n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
    n0 = PrimaryExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
      case DEC:
      case RBL:
      case SBL:
      case DOT:
      case ARROW:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_15;
      }
        n12 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SBL:
           n3 = new NodeSequence(3);
        n5 = jj_consume_token(SBL);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = Expression();
           n3.addNode(n6);
        n8 = jj_consume_token(SBR);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n2 = new NodeChoice(n3, 0);
        break;
      case RBL:
           n9 = new NodeSequence(3);
        n11 = jj_consume_token(RBL);
                   n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
        if (jj_2_34(2147483647)) {
          n13 = ArgumentExpressionList();
              n12.addNode(n13);
        } else {
          ;
        }
           n9.addNode(n12);
        n15 = jj_consume_token(RBR);
                   n14 = JTBToolkit.makeNodeToken(n15);
           n9.addNode(n14);
           n2 = new NodeChoice(n9, 1);
        break;
      case DOT:
           n16 = new NodeSequence(2);
        n18 = jj_consume_token(DOT);
                   n17 = JTBToolkit.makeNodeToken(n18);
           n16.addNode(n17);
        n20 = jj_consume_token(IDENTIFIER);
                            n19 = JTBToolkit.makeNodeToken(n20);
           n16.addNode(n19);
           n2 = new NodeChoice(n16, 2);
        break;
      case ARROW:
           n21 = new NodeSequence(2);
        n23 = jj_consume_token(ARROW);
                            n22 = JTBToolkit.makeNodeToken(n23);
           n21.addNode(n22);
        n25 = jj_consume_token(IDENTIFIER);
                            n24 = JTBToolkit.makeNodeToken(n25);
           n21.addNode(n24);
           n2 = new NodeChoice(n21, 3);
        break;
      case INC:
        n27 = jj_consume_token(INC);
                    n26 = JTBToolkit.makeNodeToken(n27);
           n2 = new NodeChoice(n26, 4);
        break;
      case DEC:
        n29 = jj_consume_token(DEC);
                    n28 = JTBToolkit.makeNodeToken(n29);
           n2 = new NodeChoice(n28, 5);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PostfixExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NUMBER:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n3 = Constant();
           n0 = new NodeChoice(n3, 1);
      break;
    case RBL:
           n4 = new NodeSequence(3);
      n6 = jj_consume_token(RBL);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
      n7 = Expression();
           n4.addNode(n7);
      n9 = jj_consume_token(RBR);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n4.addNode(n8);
           n0 = new NodeChoice(n4, 2);
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentExpressionList ArgumentExpressionList() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
    n0 = AssignmentExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_16;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgumentExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Constant Constant() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeToken n6;
   Token n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      n2 = jj_consume_token(NUMBER);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CHARACTER_LITERAL:
      n4 = jj_consume_token(CHARACTER_LITERAL);
                               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case STRING_LITERAL:
      label_17:
      while (true) {
        n7 = jj_consume_token(STRING_LITERAL);
                               n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_17;
        }
      }
        n5.nodes.trimToSize();
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Constant(n0);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_3R_109() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_123()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_231()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_182()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_237()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    }
    }
    }
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_223()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    if (jj_3R_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(RBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    if (jj_3R_156()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    if (jj_3R_161()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(SBL)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(SBR)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_220()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(RBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(AMP)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_213()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(SBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    if (jj_scan_token(SBR)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(RBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(EXCL)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(RBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(AMP)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(CARE)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(RBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_207()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(SBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    if (jj_scan_token(SBR)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(SBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    if (jj_scan_token(SBR)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_174()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_129()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(CBL)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_155()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(QEM)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_78()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(RBL)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBR)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(OR_EQ)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(XOR_EQ)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(AND_EQ)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(RSH_EQ)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(LSH_EQ)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(SUB_EQ)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(PLUS_EQ)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(MOD_EQ)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(DIV_EQ)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(MULT_EQ)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(CBL)) return true;
    if (jj_3R_218()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    }
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    if (jj_3R_178()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_scan_token(CBL)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    Token xsp;
    if (jj_3R_210()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(CBL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_238()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(AUTO)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(RSH)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(LSH)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public CParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[82];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x82800000,0x400000,0x82800000,0x9000000,0x400000,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10181000,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x0,0x0,0x0,0x10181000,0x0,0x0,0x0,0x10181000,0x0,0x0,0x10181000,0x0,0x70381000,0x4000000,0x10181000,0x74381000,0x74381000,0x20000000,0x10181000,0x10181000,0x10181000,0x0,0x10181000,0x40200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10181000,0x0,0x10000000,0x0,0x0,0x0,0x181000,0x0,0x100000,0x181000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10200000,0x2002,0x40,0x2002,0x4d9a5,0x40,0x200000,0x200000,0x21,0x0,0x0,0x40,0x0,0x10200000,0x10200000,0x200000,0x200000,0x0,0x0,0x0,0x10200000,0x10000000,0x13200000,0x200000,0x0,0x10000000,0x40,0x0,0x40,0x0,0x10000000,0x0,0x0,0x53200000,0x10000000,0x0,0x10000000,0x13200000,0x10000000,0x10000000,0x13200000,0x10000000,0x533b0018,0x200400,0x13200000,0x533b0418,0x533b0418,0x80000,0x13200000,0x13200000,0x13200000,0x120008,0x13200000,0x10010,0x0,0x0,0x0,0x8000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13200000,0x10000000,0x3000000,0x0,0x13000000,0x13000000,0x10200000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x10000,0x0,0x2000,0x4,0x8004,0x0,0x0,0x2000,0x10000,0x4,0x0,0x1,0x5e4,0x0,0x1,0x0,0x0,0x4,0x0,0x2000,0x5,0x2000,0x2000,0x5e4,0x5,0x4,0x5,0x5e4,0x1,0x1,0x5e4,0x1,0x45e4,0x0,0x5e4,0x45e4,0x45e4,0x0,0x5e4,0x5e4,0x5e4,0x0,0x5e4,0x0,0x2000,0x7fe10000,0x200,0x0,0x0,0x1000,0x800,0x100,0x80000000,0x80000000,0xc0000,0xc0000,0x0,0x0,0x60,0x60,0x1c,0x1c,0x5e4,0x0,0x5e4,0x5e4,0x20001,0x20001,0x0,0x2000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x6,0x6,0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[34];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[102];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 82; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 102; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 34; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn, t.beginOffset, t.endOffset);

      if ( t.specialToken == null )
         return node;

      Vector<NodeToken> temp = new Vector<NodeToken>();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn, t.beginOffset, t.endOffset));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial(temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}
