//
// Generated by JTB 1.3.2
//

package org.codecover.instrumentation.c.visitor;
import org.codecover.instrumentation.c.syntaxtree.*;
import java.util.*;

/**
 * All void visitors must implement this interface.
 */

public interface Visitor {

   //
   // void Auto class visitors
   //

   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * f0 -> ( ExternalDeclaration() )+
    * </PRE>
    */
   public void visit(TranslationUnit n);

   /**
    * <PRE>
    * f0 -> ( FunctionDefinition() | Declaration() )
    * </PRE>
    */
   public void visit(ExternalDeclaration n);

   /**
    * <PRE>
    * f0 -> [ DeclarationSpecifiers() ]
    * f1 -> Declarator()
    * f2 -> [ DeclarationList() ]
    * f3 -> CompoundStatement()
    * </PRE>
    */
   public void visit(FunctionDefinition n);

   /**
    * <PRE>
    * f0 -> DeclarationSpecifiers()
    * f1 -> [ InitDeclaratorList() ]
    * f2 -> ";"
    * </PRE>
    */
   public void visit(Declaration n);

   /**
    * <PRE>
    * f0 -> ( Declaration() )+
    * </PRE>
    */
   public void visit(DeclarationList n);

   /**
    * <PRE>
    * f0 -> StorageClassSpecifier() [ DeclarationSpecifiers() ]
    *       | TypeSpecifier() [ DeclarationSpecifiers() ]
    *       | TypeQualifier() [ DeclarationSpecifiers() ]
    * </PRE>
    */
   public void visit(DeclarationSpecifiers n);

   /**
    * <PRE>
    * f0 -> ( &lt;AUTO&gt; | &lt;REGISTER&gt; | &lt;STATIC&gt; | &lt;EXTERN&gt; | &lt;TYPEDEF&gt; )
    * </PRE>
    */
   public void visit(StorageClassSpecifier n);

   /**
    * <PRE>
    * f0 -> ( &lt;VOID&gt; | &lt;CHAR&gt; | &lt;SHORT&gt; | &lt;INT&gt; | &lt;LONG&gt; | &lt;FLOAT&gt; | &lt;DOUBLE&gt; | &lt;SIGNED&gt; | &lt;UNSIGNED&gt; | StructOrUnionSpecifier() | EnumSpecifier() | TypedefName() )
    * </PRE>
    */
   public void visit(TypeSpecifier n);

   /**
    * <PRE>
    * f0 -> ( &lt;CONST&gt; | &lt;VOLATILE&gt; )
    * </PRE>
    */
   public void visit(TypeQualifier n);

   /**
    * <PRE>

    * f0 -> StructOrUnion()
    * f1 -> ( [ &lt;IDENTIFIER&gt; ] "{" StructDeclarationList() "}" | &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public void visit(StructOrUnionSpecifier n);

   /**
    * <PRE>
    * f0 -> ( &lt;STRUCT&gt; | &lt;UNION&gt; )
    * </PRE>
    */
   public void visit(StructOrUnion n);

   /**
    * <PRE>
    * f0 -> ( StructDeclaration() )+
    * </PRE>
    */
   public void visit(StructDeclarationList n);

   /**
    * <PRE>
    * f0 -> InitDeclarator()
    * f1 -> ( "," InitDeclarator() )*
    * </PRE>
    */
   public void visit(InitDeclaratorList n);

   /**
    * <PRE>
    * f0 -> Declarator()
    * f1 -> [ "=" Initializer() ]
    * </PRE>
    */
   public void visit(InitDeclarator n);

   /**
    * <PRE>
    * f0 -> SpecifierQualifierList()
    * f1 -> StructDeclaratorList()
    * f2 -> ";"
    * </PRE>
    */
   public void visit(StructDeclaration n);

   /**
    * <PRE>
    * f0 -> TypeSpecifier() [ SpecifierQualifierList() ]
    *       | TypeQualifier() [ SpecifierQualifierList() ]
    * </PRE>
    */
   public void visit(SpecifierQualifierList n);

   /**
    * <PRE>
    * f0 -> StructDeclarator()
    * f1 -> ( "," StructDeclarator() )*
    * </PRE>
    */
   public void visit(StructDeclaratorList n);

   /**
    * <PRE>
    * f0 -> ( Declarator() | [ Declarator() ] ":" ConstantExpression() )
    * </PRE>
    */
   public void visit(StructDeclarator n);

   /**
    * <PRE>
    * f0 -> &lt;ENUM&gt;
    * f1 -> ( [ &lt;IDENTIFIER&gt; ] "{" EnumeratorList() "}" | &lt;IDENTIFIER&gt; )
    * </PRE>
    */
   public void visit(EnumSpecifier n);

   /**
    * <PRE>
    * f0 -> Enumerator()
    * f1 -> ( "," Enumerator() )*
    * </PRE>
    */
   public void visit(EnumeratorList n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> [ "=" ConstantExpression() ]
    * </PRE>
    */
   public void visit(Enumerator n);

   /**
    * <PRE>
    * f0 -> [ Pointer() ]
    * f1 -> DirectDeclarator()
    * </PRE>
    */
   public void visit(Declarator n);

   /**
    * <PRE>
    * f0 -> ( t=&lt;IDENTIFIER&gt; | "(" Declarator() ")" )
    * f1 -> ( "[" [ ConstantExpression() ] "]" | "(" ParameterTypeList() ")" | "(" [ IdentifierList() ] ")" )*
    * </PRE>
    */
   public void visit(DirectDeclarator n);

   /**
    * <PRE>
    * f0 -> "*"
    * f1 -> [ TypeQualifierList() ]
    * f2 -> [ Pointer() ]
    * </PRE>
    */
   public void visit(Pointer n);

   /**
    * <PRE>
    * f0 -> ( TypeQualifier() )+
    * </PRE>
    */
   public void visit(TypeQualifierList n);

   /**
    * <PRE>
    * f0 -> ParameterList()
    * f1 -> [ "," &lt;ELLIPSIS: "..."&gt; ]
    * </PRE>
    */
   public void visit(ParameterTypeList n);

   /**
    * <PRE>
    * f0 -> ParameterDeclaration()
    * f1 -> ( "," ParameterDeclaration() )*
    * </PRE>
    */
   public void visit(ParameterList n);

   /**
    * <PRE>
    * f0 -> DeclarationSpecifiers()
    * f1 -> ( Declarator() | [ AbstractDeclarator() ] )
    * </PRE>
    */
   public void visit(ParameterDeclaration n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * f1 -> ( "," &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public void visit(IdentifierList n);

   /**
    * <PRE>
    * f0 -> ( AssignmentExpression() | "{" InitializerList() [ "," ] "}" )
    * </PRE>
    */
   public void visit(Initializer n);

   /**
    * <PRE>
    * f0 -> Initializer()
    * f1 -> ( "," Initializer() )*
    * </PRE>
    */
   public void visit(InitializerList n);

   /**
    * <PRE>
    * f0 -> SpecifierQualifierList()
    * f1 -> [ AbstractDeclarator() ]
    * </PRE>
    */
   public void visit(TypeName n);

   /**
    * <PRE>
    * f0 -> ( Pointer() | [ Pointer() ] DirectAbstractDeclarator() )
    * </PRE>
    */
   public void visit(AbstractDeclarator n);

   /**
    * <PRE>
    * f0 -> ( "(" AbstractDeclarator() ")" | "[" [ ConstantExpression() ] "]" | "(" [ ParameterTypeList() ] ")" )
    * f1 -> ( "[" [ ConstantExpression() ] "]" | "(" [ ParameterTypeList() ] ")" )*
    * </PRE>
    */
   public void visit(DirectAbstractDeclarator n);

   /**
    * <PRE>
    * f0 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public void visit(TypedefName n);

   /**
    * <PRE>
    * f0 -> ( LabeledStatement() | ExpressionStatement() | CompoundStatement() | SelectionStatement() | IterationStatement() | JumpStatement() )
    * </PRE>
    */
   public void visit(Statement n);

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFIER&gt; ":" Statement() | &lt;CASE&gt; ConstantExpression() ":" Statement() | &lt;DFLT&gt; ":" Statement() )
    * </PRE>
    */
   public void visit(LabeledStatement n);

   /**
    * <PRE>
    * f0 -> [ Expression() ]
    * f1 -> ";"
    * </PRE>
    */
   public void visit(ExpressionStatement n);

   /**
    * <PRE>
    * f0 -> "{"
    * f1 -> [ DeclarationList() ]
    * f2 -> [ StatementList() ]
    * f3 -> "}"
    * </PRE>
    */
   public void visit(CompoundStatement n);

   /**
    * <PRE>
    * f0 -> ( Statement() )+
    * </PRE>
    */
   public void visit(StatementList n);

   /**
    * <PRE>
    * f0 -> ( &lt;IF&gt; "(" Expression() ")" Statement() [ &lt;ELSE&gt; Statement() ] | &lt;SWITCH&gt; "(" Expression() ")" Statement() )
    * </PRE>
    */
   public void visit(SelectionStatement n);

   /**
    * <PRE>
    * f0 -> ( &lt;WHILE&gt; "(" Expression() ")" Statement() | &lt;DO&gt; Statement() &lt;WHILE&gt; "(" Expression() ")" ";" | &lt;FOR&gt; "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement() )
    * </PRE>
    */
   public void visit(IterationStatement n);

   /**
    * <PRE>
    * f0 -> ( &lt;GOTO&gt; &lt;IDENTIFIER&gt; ";" | &lt;CONTINUE&gt; ";" | &lt;BREAK&gt; ";" | &lt;RETURN&gt; [ Expression() ] ";" )
    * </PRE>
    */
   public void visit(JumpStatement n);

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public void visit(Expression n);

   /**
    * <PRE>
    * f0 -> UnaryExpression() AssignmentOperator() AssignmentExpression()
    *       | ConditionalExpression()
    * </PRE>
    */
   public void visit(AssignmentExpression n);

   /**
    * <PRE>
    * f0 -> ( "=" | &lt;MULT_EQ: "*="&gt; | &lt;DIV_EQ: "/="&gt; | &lt;MOD_EQ: "%="&gt; | &lt;PLUS_EQ: "+="&gt; | &lt;SUB_EQ: "-="&gt; | &lt;LSH_EQ: "&lt;&lt;="&gt; | &lt;RSH_EQ: "&gt;&gt;="&gt; | &lt;AND_EQ: "&="&gt; | &lt;XOR_EQ: "^="&gt; | &lt;OR_EQ: "|="&gt; )
    * </PRE>
    */
   public void visit(AssignmentOperator n);

   /**
    * <PRE>
    * f0 -> LogicalORExpression()
    * f1 -> [ "?" Expression() ":" ConditionalExpression() ]
    * </PRE>
    */
   public void visit(ConditionalExpression n);

   /**
    * <PRE>
    * f0 -> ConditionalExpression()
    * </PRE>
    */
   public void visit(ConstantExpression n);

   /**
    * <PRE>
    * f0 -> LogicalANDExpression()
    * f1 -> [ "||" LogicalORExpression() ]
    * </PRE>
    */
   public void visit(LogicalORExpression n);

   /**
    * <PRE>
    * f0 -> InclusiveORExpression()
    * f1 -> [ "&&" LogicalANDExpression() ]
    * </PRE>
    */
   public void visit(LogicalANDExpression n);

   /**
    * <PRE>
    * f0 -> ExclusiveORExpression()
    * f1 -> [ "|" InclusiveORExpression() ]
    * </PRE>
    */
   public void visit(InclusiveORExpression n);

   /**
    * <PRE>
    * f0 -> ANDExpression()
    * f1 -> [ "^" ExclusiveORExpression() ]
    * </PRE>
    */
   public void visit(ExclusiveORExpression n);

   /**
    * <PRE>
    * f0 -> EqualityExpression()
    * f1 -> [ "&" ANDExpression() ]
    * </PRE>
    */
   public void visit(ANDExpression n);

   /**
    * <PRE>
    * f0 -> RelationalExpression()
    * f1 -> [ ( &lt;EQ: "=="&gt; | &lt;NE: "!="&gt; ) EqualityExpression() ]
    * </PRE>
    */
   public void visit(EqualityExpression n);

   /**
    * <PRE>
    * f0 -> ShiftExpression()
    * f1 -> [ ( "&lt;" | "&gt;" | &lt;LE: "&lt;="&gt; | &lt;GE: "&gt;="&gt; ) RelationalExpression() ]
    * </PRE>
    */
   public void visit(RelationalExpression n);

   /**
    * <PRE>
    * f0 -> AdditiveExpression()
    * f1 -> [ ( &lt;LSH: "&lt;&lt;"&gt; | &lt;RSH: "&gt;&gt;"&gt; ) ShiftExpression() ]
    * </PRE>
    */
   public void visit(ShiftExpression n);

   /**
    * <PRE>
    * f0 -> MultiplicativeExpression()
    * f1 -> [ ( "+" | "-" ) AdditiveExpression() ]
    * </PRE>
    */
   public void visit(AdditiveExpression n);

   /**
    * <PRE>
    * f0 -> CastExpression()
    * f1 -> [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
    * </PRE>
    */
   public void visit(MultiplicativeExpression n);

   /**
    * <PRE>
    * f0 -> ( "(" TypeName() ")" CastExpression() | UnaryExpression() )
    * </PRE>
    */
   public void visit(CastExpression n);

   /**
    * <PRE>
    * f0 -> ( PostfixExpression() | "++" UnaryExpression() | "--" UnaryExpression() | UnaryOperator() CastExpression() | &lt;SIZEOF&gt; ( UnaryExpression() | "(" TypeName() ")" ) )
    * </PRE>
    */
   public void visit(UnaryExpression n);

   /**
    * <PRE>
    * f0 -> ( "&" | "*" | "+" | "-" | "~" | "!" )
    * </PRE>
    */
   public void visit(UnaryOperator n);

   /**
    * <PRE>
    * f0 -> PrimaryExpression()
    * f1 -> ( "[" Expression() "]" | "(" [ ArgumentExpressionList() ] ")" | "." &lt;IDENTIFIER&gt; | &lt;ARROW: "-&gt;"&gt; &lt;IDENTIFIER&gt; | "++" | "--" )*
    * </PRE>
    */
   public void visit(PostfixExpression n);

   /**
    * <PRE>
    * f0 -> ( &lt;IDENTIFIER&gt; | Constant() | "(" Expression() ")" )
    * </PRE>
    */
   public void visit(PrimaryExpression n);

   /**
    * <PRE>
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    * </PRE>
    */
   public void visit(ArgumentExpressionList n);

   /**
    * <PRE>
    * f0 -> &lt;NUMBER&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | ( &lt;STRING_LITERAL&gt; )+
    * </PRE>
    */
   public void visit(Constant n);

}

