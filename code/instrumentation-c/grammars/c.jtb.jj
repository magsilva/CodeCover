//
// Generated by JTB 1.3.2
//

options {
   STATIC = false;
   USER_TOKEN_MANAGER = true;
   TOKEN_EXTENDS = "org.codecover.instrumentation.c.adapter.CCToken";
}

PARSER_BEGIN(CParser)
package org.codecover.instrumentation.c.parser;

import java.util.*;
import org.codecover.instrumentation.c.syntaxtree.*;
import java.util.Vector;


public class CParser 
{
   private Set types = new HashSet();
   private Stack typedefParsingStack = new Stack();
   private boolean isType(String type)
   {
      return types.contains(type);
   }
   private void addType(String type)
   {
      types.add(type);
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CParser)

TOKEN :
{
   <NUMBER: (<INTEGER_LITERAL> | <FLOATING_POINT_LITERAL>)>
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "\'" (~["\'", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
   | <STRING_LITERAL: "\"" (~["\"", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"] | (["\n", "\r"] | "\r\n")))* "\"">
}

TOKEN :
{
   <ALIGNOF: "alignof">
   | <AUTO: "auto">
   | <BREAK: "break">
   | <CASE: "case">
   | <CHAR: "char">
   | <CONST: "const">
   | <CONTINUE: "continue">
   | <DFLT: "default">
   | <DO: "do">
   | <DOUBLE: "double">
   | <ELSE: "else">
   | <ENUM: "enum">
   | <EXTERN: "extern">
   | <FLOAT: "float">
   | <FOR: "for">
   | <GOTO: "goto">
   | <IF: "if">
   | <INLINE: "inline">
   | <INT: "int">
   | <LONG: "long">
   | <REGISTER: "register">
   | <RESTRICT: "restrict">
   | <RETURN: "return">
   | <SHORT: "short">
   | <SIGNED: "signed">
   | <SIZEOF: "sizeof">
   | <STATIC: "static">
   | <STRUCT: "struct">
   | <SWITCH: "switch">
   | <TYPEDEF: "typedef">
   | <UNION: "union">
   | <UNSIGNED: "unsigned">
   | <VOID: "void">
   | <VOLATILE: "volatile">
   | <WHILE: "while">
   | <ALIGNAS: "_Alignas">
   | <ATOMIC: "_Atomic">
   | <BOOL: "_Bool">
   | <COMPLEX: "_Complex">
   | <GENERIC: "_Generic">
   | <IMAGINARY: "_Imaginary">
   | <NORETURN: "_Noreturn">
   | <STATICASSERT: "_Static_assert">
   | <THREADLOCAL: "_Thread_local">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
}

TOKEN :
{
   <INC: "++">
   | <DEC: "--">
   | <LAND: "&&">
   | <LOR: "||">
   | <RBL: "(">
   | <RBR: ")">
   | <CBL: "{">
   | <CBR: "}">
   | <SBL: "[">
   | <SBR: "]">
   | <STAR: "*">
   | <SLASH: "/">
   | <MOD: "%">
   | <PLUS: "+">
   | <MINUS: "-">
   | <EXCL: "!">
   | <AMP: "&">
   | <QEM: "?">
   | <TILDE: "~">
   | <CARE: "^">
   | <PIPE: "|">
   | <COMMA: ",">
   | <SEMICOLON: ";">
   | <COLON: ":">
   | <ASSIGNMENT: "=">
   | <DOT: ".">
   | <LESS: "<">
   | <GREATER: ">">
}

TranslationUnit TranslationUnit() :
{
   NodeList n0 = new NodeList();
   ExternalDeclaration n1;

   
}
{
   (
      n1=ExternalDeclaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TranslationUnit(n0); }
}

ExternalDeclaration ExternalDeclaration() :
{
   NodeChoice n0;
   FunctionDefinition n1;
   Declaration n2;

   
}
{
   (
      (
         LOOKAHEAD(FunctionDefinition())
         n1=FunctionDefinition()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Declaration()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new ExternalDeclaration(n0); }
}

FunctionDefinition FunctionDefinition() :
{
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;

   
}
{
   (
      LOOKAHEAD(DeclarationSpecifiers())
      n1=DeclarationSpecifiers()
      { n0.addNode(n1); }
   )?
   n2=Declarator()
   (
      n4=DeclarationList()
      { n3.addNode(n4); }
   )?
   n5=CompoundStatement()
   
   { return new FunctionDefinition(n0,n2,n3,n5); }
}

Declaration Declaration() :
{
   DeclarationSpecifiers n0;
   NodeOptional n1 = new NodeOptional();
   InitDeclaratorList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=DeclarationSpecifiers()
   (
      n2=InitDeclaratorList()
      { n1.addNode(n2); }
   )?
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Declaration(n0,n1,n3); }
}

DeclarationList DeclarationList() :
{
   NodeList n0 = new NodeList();
   Declaration n1;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationList(n0); }
}

DeclarationSpecifiers DeclarationSpecifiers() :
{
   NodeChoice n0;
   NodeSequence n1;
   StorageClassSpecifier n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationSpecifiers n4;
   NodeSequence n5;
   TypeSpecifier n6;
   NodeOptional n7 = new NodeOptional();
   DeclarationSpecifiers n8;
   NodeSequence n9;
   TypeQualifier n10;
   NodeOptional n11 = new NodeOptional();
   DeclarationSpecifiers n12;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=StorageClassSpecifier()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(DeclarationSpecifiers())
         n4=DeclarationSpecifiers()
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n6=TypeSpecifier()
      { n5.addNode(n6); }
      (
         LOOKAHEAD(DeclarationSpecifiers())
         n8=DeclarationSpecifiers()
         { n7.addNode(n8); }
      )?
      { n5.addNode(n7); }
      { n0 = new NodeChoice(n5, 1); }
   |
      { n9 = new NodeSequence(2); }
      n10=TypeQualifier()
      { n9.addNode(n10); }
      (
         LOOKAHEAD(DeclarationSpecifiers())
         n12=DeclarationSpecifiers()
         { n11.addNode(n12); }
      )?
      { n9.addNode(n11); }
      { n0 = new NodeChoice(n9, 2); }
   )
   
   { return new DeclarationSpecifiers(n0); }
}

StorageClassSpecifier StorageClassSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      (
         n2=<AUTO> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REGISTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<STATIC> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<EXTERN> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<TYPEDEF> { n9 = JTBToolkit.makeNodeToken(n10); }
         
         {
            typedefParsingStack.push(true);
         }
         
         { n0 = new NodeChoice(n9, 4); }
      )
      
   )
   
   { return new StorageClassSpecifier(n0); }
}

TypeSpecifier TypeSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   StructOrUnionSpecifier n19;
   EnumSpecifier n20;
   TypedefName n21;

   
}
{
   (
      (
         n2=<VOID> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<SHORT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<INT> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<LONG> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<FLOAT> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<DOUBLE> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<SIGNED> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<UNSIGNED> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n19=StructOrUnionSpecifier()
         { n0 = new NodeChoice(n19, 9); }
      |
         n20=EnumSpecifier()
         { n0 = new NodeChoice(n20, 10); }
      |
         LOOKAHEAD({ isType(getToken(1).image) })
         n21=TypedefName()
         { n0 = new NodeChoice(n21, 11); }
      )
      
   )
   
   { return new TypeSpecifier(n0); }
}

TypeQualifier TypeQualifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      (
         n2=<CONST> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<VOLATILE> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new TypeQualifier(n0); }
}

StructOrUnionSpecifier StructOrUnionSpecifier() :
{
   StructOrUnion n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   StructDeclarationList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   
   {
      typedefParsingStack.push(false);
   }
   
   n0=StructOrUnion()
   (
      (
         LOOKAHEAD(3)
         { n2 = new NodeSequence(5); }
         (
            n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n7="{" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n2.addNode(n6); }
         n8=StructDeclarationList()
         { n2.addNode(n8); }
         n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2.addNode(n9); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n12=<IDENTIFIER> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n1 = new NodeChoice(n11, 1); }
      )
      
   )
   
   {
      typedefParsingStack.pop();
   }
   
   
   { return new StructOrUnionSpecifier(n0,n1); }
}

StructOrUnion StructOrUnion() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      (
         n2=<STRUCT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<UNION> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new StructOrUnion(n0); }
}

StructDeclarationList StructDeclarationList() :
{
   NodeList n0 = new NodeList();
   StructDeclaration n1;

   
}
{
   (
      n1=StructDeclaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StructDeclarationList(n0); }
}

InitDeclaratorList InitDeclaratorList() :
{
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;

   
}
{
   n0=InitDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InitDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   {
      if ( !(typedefParsingStack.empty()) && (typedefParsingStack.peek()) )
      {
         typedefParsingStack.pop();
      }
   }
   
   
   { return new InitDeclaratorList(n0,n1); }
}

InitDeclarator InitDeclarator() :
{
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Declarator()
   (
      { n2 = new NodeSequence(2); }
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InitDeclarator(n0,n1); }
}

StructDeclaration StructDeclaration() :
{
   SpecifierQualifierList n0;
   StructDeclaratorList n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=SpecifierQualifierList()
   n1=StructDeclaratorList()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new StructDeclaration(n0,n1,n2); }
}

SpecifierQualifierList SpecifierQualifierList() :
{
   NodeChoice n0;
   NodeSequence n1;
   TypeSpecifier n2;
   NodeOptional n3 = new NodeOptional();
   SpecifierQualifierList n4;
   NodeSequence n5;
   TypeQualifier n6;
   NodeOptional n7 = new NodeOptional();
   SpecifierQualifierList n8;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=TypeSpecifier()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(SpecifierQualifierList())
         n4=SpecifierQualifierList()
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n6=TypeQualifier()
      { n5.addNode(n6); }
      (
         LOOKAHEAD(SpecifierQualifierList())
         n8=SpecifierQualifierList()
         { n7.addNode(n8); }
      )?
      { n5.addNode(n7); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new SpecifierQualifierList(n0); }
}

StructDeclaratorList StructDeclaratorList() :
{
   StructDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StructDeclarator n5;

   
}
{
   n0=StructDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=StructDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new StructDeclaratorList(n0,n1); }
}

StructDeclarator StructDeclarator() :
{
   NodeChoice n0;
   Declarator n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Declarator n4;
   NodeToken n5;
   Token n6;
   ConstantExpression n7;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n1=Declarator()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(3); }
         (
            n4=Declarator()
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2.addNode(n5); }
         n7=ConstantExpression()
         { n2.addNode(n7); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new StructDeclarator(n0); }
}

EnumSpecifier EnumSpecifier() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   EnumeratorList n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1=<ENUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         LOOKAHEAD(3)
         { n3 = new NodeSequence(5); }
         (
            n6=<IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         n9=EnumeratorList()
         { n3.addNode(n9); }
         n11="}" { n10 = JTBToolkit.makeNodeToken(n11); }
         { n3.addNode(n10); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n13=<IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n2 = new NodeChoice(n12, 1); }
      )
      
   )
   
   { return new EnumSpecifier(n0,n2); }
}

EnumeratorList EnumeratorList() :
{
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;

   
}
{
   n0=Enumerator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Enumerator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new EnumeratorList(n0,n1); }
}

Enumerator Enumerator() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=ConstantExpression()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Enumerator(n0,n2); }
}

Declarator Declarator() :
{
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;

   
}
{
   (
      n1=Pointer()
      { n0.addNode(n1); }
   )?
   n2=DirectDeclarator()
   
   { return new Declarator(n0,n2); }
}

DirectDeclarator DirectDeclarator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   ConstantExpression n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterTypeList n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   IdentifierList n28;
   NodeToken n29;
   Token n30;

   Token t;
}
{
   (
      (
         t=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
         
         {
            if ( !(typedefParsingStack.empty()) && (typedefParsingStack.peek()) )
            {
               addType(t.image);
            }
         }
         
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(3); }
         n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Declarator()
         { n3.addNode(n6); }
         n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   {
      typedefParsingStack.push(false);
   }
   
   (
      { n14 = new NodeOptional(); }
      { n27 = new NodeOptional(); }
      (
         { n11 = new NodeSequence(3); }
         n13="[" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         (
            n15=ConstantExpression()
            { n14.addNode(n15); }
         )?
         { n11.addNode(n14); }
         n17="]" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11.addNode(n16); }
         { n10 = new NodeChoice(n11, 0); }
      |
         LOOKAHEAD(3)
         { n18 = new NodeSequence(4); }
         n20="(" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n21=ParameterTypeList()
         { n18.addNode(n21); }
         n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
         { n18.addNode(n22); }
         { n10 = new NodeChoice(n18, 1); }
      |
         { n24 = new NodeSequence(3); }
         n26="(" { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         (
            n28=IdentifierList()
            { n27.addNode(n28); }
         )?
         { n24.addNode(n27); }
         n30=")" { n29 = JTBToolkit.makeNodeToken(n30); }
         { n24.addNode(n29); }
         { n10 = new NodeChoice(n24, 2); }
      )
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   
   {
      typedefParsingStack.pop();
   }
   
   
   { return new DirectDeclarator(n0,n9); }
}

Pointer Pointer() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeQualifierList n3;
   NodeOptional n4 = new NodeOptional();
   Pointer n5;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=TypeQualifierList()
      { n2.addNode(n3); }
   )?
   (
      n5=Pointer()
      { n4.addNode(n5); }
   )?
   
   { return new Pointer(n0,n2,n4); }
}

TypeQualifierList TypeQualifierList() :
{
   NodeList n0 = new NodeList();
   TypeQualifier n1;

   
}
{
   (
      n1=TypeQualifier()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TypeQualifierList(n0); }
}

ParameterTypeList ParameterTypeList() :
{
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=ParameterList()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6=<ELLIPSIS:"..."> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ParameterTypeList(n0,n1); }
}

ParameterList ParameterList() :
{
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;

   
}
{
   n0=ParameterDeclaration()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ParameterDeclaration()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ParameterList(n0,n1); }
}

ParameterDeclaration ParameterDeclaration() :
{
   DeclarationSpecifiers n0;
   NodeChoice n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   AbstractDeclarator n4;

   
}
{
   n0=DeclarationSpecifiers()
   (
      (
         LOOKAHEAD(Declarator())
         n2=Declarator()
         { n1 = new NodeChoice(n2, 0); }
      |
         (
            n4=AbstractDeclarator()
            { n3.addNode(n4); }
         )?
         { n1 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new ParameterDeclaration(n0,n1); }
}

IdentifierList IdentifierList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n2); }
}

Initializer Initializer() :
{
   NodeChoice n0;
   AssignmentExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitializerList n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      (
         n1=AssignmentExpression()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(4); }
         n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=InitializerList()
         { n2.addNode(n5); }
         (
            n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n2.addNode(n6); }
         n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2.addNode(n9); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new Initializer(n0); }
}

InitializerList InitializerList() :
{
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Initializer()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new InitializerList(n0,n1); }
}

TypeName TypeName() :
{
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;

   
}
{
   n0=SpecifierQualifierList()
   (
      n2=AbstractDeclarator()
      { n1.addNode(n2); }
   )?
   
   { return new TypeName(n0,n1); }
}

AbstractDeclarator AbstractDeclarator() :
{
   NodeChoice n0;
   Pointer n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Pointer n4;
   DirectAbstractDeclarator n5;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n1=Pointer()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(2); }
         (
            n4=Pointer()
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n5=DirectAbstractDeclarator()
         { n2.addNode(n5); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new AbstractDeclarator(n0); }
}

DirectAbstractDeclarator DirectAbstractDeclarator() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   AbstractDeclarator n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ConstantExpression n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ParameterTypeList n18;
   NodeToken n19;
   Token n20;
   NodeListOptional n21 = new NodeListOptional();
   NodeChoice n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   ConstantExpression n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   ParameterTypeList n34;
   NodeToken n35;
   Token n36;

   
}
{
   (
      (
         LOOKAHEAD(2)
         { n1 = new NodeSequence(4); }
         n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=AbstractDeclarator()
         { n1.addNode(n4); }
         n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(3); }
         n9="[" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n11=ConstantExpression()
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         n13="]" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7.addNode(n12); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n14 = new NodeSequence(3); }
         n16="(" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         (
            n18=ParameterTypeList()
            { n17.addNode(n18); }
         )?
         { n14.addNode(n17); }
         n20=")" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n14.addNode(n19); }
         { n0 = new NodeChoice(n14, 2); }
      )
      
   )
   (
      { n26 = new NodeOptional(); }
      { n33 = new NodeOptional(); }
      (
         { n23 = new NodeSequence(3); }
         n25="[" { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         (
            n27=ConstantExpression()
            { n26.addNode(n27); }
         )?
         { n23.addNode(n26); }
         n29="]" { n28 = JTBToolkit.makeNodeToken(n29); }
         { n23.addNode(n28); }
         { n22 = new NodeChoice(n23, 0); }
      |
         { n30 = new NodeSequence(3); }
         n32="(" { n31 = JTBToolkit.makeNodeToken(n32); }
         { n30.addNode(n31); }
         (
            n34=ParameterTypeList()
            { n33.addNode(n34); }
         )?
         { n30.addNode(n33); }
         n36=")" { n35 = JTBToolkit.makeNodeToken(n36); }
         { n30.addNode(n35); }
         { n22 = new NodeChoice(n30, 1); }
      )
      { n21.addNode(n22); }
   )*
   { n21.nodes.trimToSize(); }
   
   { return new DirectAbstractDeclarator(n0,n21); }
}

TypedefName TypedefName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TypedefName(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   LabeledStatement n1;
   CompoundStatement n2;
   ExpressionStatement n3;
   IfStatement n4;
   SwitchStatement n5;
   WhileStatement n6;
   DoStatement n7;
   ForStatement n8;
   JumpStatement n9;

   
}
{
   (
      (
         LOOKAHEAD(2)
         n1=LabeledStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=CompoundStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=ExpressionStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=IfStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         n5=SwitchStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         n6=WhileStatement()
         { n0 = new NodeChoice(n6, 5); }
      |
         n7=DoStatement()
         { n0 = new NodeChoice(n7, 6); }
      |
         n8=ForStatement()
         { n0 = new NodeChoice(n8, 7); }
      |
         n9=JumpStatement()
         { n0 = new NodeChoice(n9, 8); }
      )
      
   )
   
   { return new Statement(n0); }
}

LabeledStatement LabeledStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Statement n6;
   CaseStatement n7;
   DefaultStatement n8;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=Statement()
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n7=CaseStatement()
         { n0 = new NodeChoice(n7, 1); }
      |
         n8=DefaultStatement()
         { n0 = new NodeChoice(n8, 2); }
      )
      
   )
   
   { return new LabeledStatement(n0); }
}

CaseStatement CaseStatement() :
{
   NodeToken n0;
   Token n1;
   ConstantExpression n2;
   NodeToken n3;
   Token n4;
   Statement n5;

   
}
{
   n1=<CASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConstantExpression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Statement()
   
   { return new CaseStatement(n0,n2,n3,n5); }
}

DefaultStatement DefaultStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;

   
}
{
   n1=<DFLT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=":" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Statement()
   
   { return new DefaultStatement(n0,n2,n4); }
}

ExpressionStatement ExpressionStatement() :
{
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Expression()
      { n0.addNode(n1); }
   )?
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExpressionStatement(n0,n2); }
}

CompoundStatement CompoundStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeclarationList n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(DeclarationList())
      n3=DeclarationList()
      { n2.addNode(n3); }
   )?
   (
      n5=StatementList()
      { n4.addNode(n5); }
   )?
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new CompoundStatement(n0,n2,n4,n6); }
}

StatementList StatementList() :
{
   NodeList n0 = new NodeList();
   Statement n1;

   
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StatementList(n0); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   (
      LOOKAHEAD(2)
      { n9 = new NodeSequence(2); }
      n11=<ELSE> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=Statement()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<SWITCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new SwitchStatement(n0,n2,n4,n5,n7); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

DoStatement DoStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<DO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   n4=<WHILE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoStatement(n0,n2,n3,n5,n7,n8,n10); }
}

ForStatement ForStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Expression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   Expression n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   Expression n13;
   NodeToken n14;
   Token n15;
   Statement n16;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=Expression()
      { n4.addNode(n5); }
   )?
   n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=Expression()
      { n8.addNode(n9); }
   )?
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n13=Expression()
      { n12.addNode(n13); }
   )?
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Statement()
   
   { return new ForStatement(n0,n2,n4,n6,n8,n10,n12,n14,n16); }
}

JumpStatement JumpStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   ReturnStatement n18;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<GOTO> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n8 = new NodeSequence(2); }
         n10=<CONTINUE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n0 = new NodeChoice(n8, 1); }
      |
         { n13 = new NodeSequence(2); }
         n15=<BREAK> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n17=";" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13.addNode(n16); }
         { n0 = new NodeChoice(n13, 2); }
      |
         n18=ReturnStatement()
         { n0 = new NodeChoice(n18, 3); }
      )
      
   )
   
   { return new JumpStatement(n0); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Expression()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ReturnStatement(n0,n2,n4); }
}

Expression Expression() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Expression(n0,n1); }
}

AssignmentExpression AssignmentExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   ConditionalExpression n5;

   
}
{
   (
      LOOKAHEAD(UnaryExpression() AssignmentOperator())
      { n1 = new NodeSequence(4); }
      n2=UnaryExpression()
      { n1.addNode(n2); }
      n3=AssignmentOperator()
      { n1.addNode(n3); }
      n4=AssignmentExpression()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n5=ConditionalExpression()
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new AssignmentExpression(n0); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      (
         n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MULT_EQ:"*="> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<DIV_EQ:"/="> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<MOD_EQ:"%="> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<PLUS_EQ:"+="> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<SUB_EQ:"-="> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<LSH_EQ:"<<="> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<RSH_EQ:">>="> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<AND_EQ:"&="> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20=<XOR_EQ:"^="> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22=<OR_EQ:"|="> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      )
      
   )
   
   { return new AssignmentOperator(n0); }
}

ConditionalExpression ConditionalExpression() :
{
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   ConditionalExpression n8;

   
}
{
   n0=LogicalORExpression()
   (
      { n2 = new NodeSequence(4); }
      n4="?" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      n7=":" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      n8=ConditionalExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConstantExpression ConstantExpression() :
{
   ConditionalExpression n0;

   
}
{
   n0=ConditionalExpression()
   
   { return new ConstantExpression(n0); }
}

LogicalORExpression LogicalORExpression() :
{
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;

   
}
{
   n0=LogicalANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="||" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalORExpression(n0,n1); }
}

LogicalANDExpression LogicalANDExpression() :
{
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;

   
}
{
   n0=InclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalANDExpression(n0,n1); }
}

InclusiveORExpression InclusiveORExpression() :
{
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;

   
}
{
   n0=ExclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="|" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InclusiveORExpression(n0,n1); }
}

ExclusiveORExpression ExclusiveORExpression() :
{
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;

   
}
{
   n0=ANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="^" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ExclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ExclusiveORExpression(n0,n1); }
}

ANDExpression ANDExpression() :
{
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;

   
}
{
   n0=EqualityExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ANDExpression(n0,n1); }
}

EqualityExpression EqualityExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   EqualityExpression n8;

   
}
{
   n0=RelationalExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<EQ:"=="> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<NE:"!="> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=EqualityExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   RelationalExpression n12;

   
}
{
   n0=ShiftExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="<" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=">" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<LE:"<="> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=<GE:">="> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         )
         
      )
      { n2.addNode(n3); }
      n12=RelationalExpression()
      { n2.addNode(n12); }
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ShiftExpression n8;

   
}
{
   n0=AdditiveExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<LSH:"<<"> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<RSH:">>"> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=ShiftExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new ShiftExpression(n0,n1); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AdditiveExpression n8;

   
}
{
   n0=MultiplicativeExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="+" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="-" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=AdditiveExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   MultiplicativeExpression n10;

   
}
{
   n0=CastExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="*" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="/" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9="%" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n10=MultiplicativeExpression()
      { n2.addNode(n10); }
      { n1.addNode(n2); }
   )?
   
   { return new MultiplicativeExpression(n0,n1); }
}

CastExpression CastExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   TypeName n4;
   NodeToken n5;
   Token n6;
   CastExpression n7;
   UnaryExpression n8;

   
}
{
   (
      (
         LOOKAHEAD("(" TypeName() ")" CastExpression())
         { n1 = new NodeSequence(5); }
         n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=TypeName()
         { n1.addNode(n4); }
         n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         n7=CastExpression()
         { n1.addNode(n7); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8=UnaryExpression()
         { n0 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new CastExpression(n0); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   PostfixExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   UnaryExpression n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   UnaryExpression n9;
   NodeSequence n10;
   UnaryOperator n11;
   CastExpression n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeChoice n16;
   UnaryExpression n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   TypeName n21;
   NodeToken n22;
   Token n23;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n1=PostfixExpression()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(2); }
         n4="++" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=UnaryExpression()
         { n2.addNode(n5); }
         { n0 = new NodeChoice(n2, 1); }
      |
         { n6 = new NodeSequence(2); }
         n8="--" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=UnaryExpression()
         { n6.addNode(n9); }
         { n0 = new NodeChoice(n6, 2); }
      |
         { n10 = new NodeSequence(2); }
         n11=UnaryOperator()
         { n10.addNode(n11); }
         n12=CastExpression()
         { n10.addNode(n12); }
         { n0 = new NodeChoice(n10, 3); }
      |
         { n13 = new NodeSequence(2); }
         n15=<SIZEOF> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         (
            (
               LOOKAHEAD(UnaryExpression())
               n17=UnaryExpression()
               { n16 = new NodeChoice(n17, 0); }
            |
               { n18 = new NodeSequence(3); }
               n20="(" { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
               n21=TypeName()
               { n18.addNode(n21); }
               n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
               { n18.addNode(n22); }
               { n16 = new NodeChoice(n18, 1); }
            )
            
         )
         { n13.addNode(n16); }
         { n0 = new NodeChoice(n13, 4); }
      )
      
   )
   
   { return new UnaryExpression(n0); }
}

UnaryOperator UnaryOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      (
         n2="&" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="*" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="+" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="-" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10="~" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12="!" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   
   { return new UnaryOperator(n0); }
}

PostfixExpression PostfixExpression() :
{
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   ArgumentExpressionList n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;

   
}
{
   n0=PrimaryExpression()
   (
      { n12 = new NodeOptional(); }
      (
         { n3 = new NodeSequence(3); }
         n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Expression()
         { n3.addNode(n6); }
         n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(3); }
         n11="(" { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            LOOKAHEAD(ArgumentExpressionList())
            n13=ArgumentExpressionList()
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
         { n9.addNode(n14); }
         { n2 = new NodeChoice(n9, 1); }
      |
         { n16 = new NodeSequence(2); }
         n18="." { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
         n20=<IDENTIFIER> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n16.addNode(n19); }
         { n2 = new NodeChoice(n16, 2); }
      |
         { n21 = new NodeSequence(2); }
         n23=<ARROW:"->"> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n25=<IDENTIFIER> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n21.addNode(n24); }
         { n2 = new NodeChoice(n21, 3); }
      |
         n27="++" { n26 = JTBToolkit.makeNodeToken(n27); }
         { n2 = new NodeChoice(n26, 4); }
      |
         n29="--" { n28 = JTBToolkit.makeNodeToken(n29); }
         { n2 = new NodeChoice(n28, 5); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PostfixExpression(n0,n1); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=Constant()
         { n0 = new NodeChoice(n3, 1); }
      |
         { n4 = new NodeSequence(3); }
         n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=Expression()
         { n4.addNode(n7); }
         n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n4.addNode(n8); }
         { n0 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new PrimaryExpression(n0); }
}

ArgumentExpressionList ArgumentExpressionList() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentExpressionList(n0,n1); }
}

Constant Constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeToken n6;
   Token n7;

   
}
{
   (
      n2=<NUMBER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CHARACTER_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      (
         n7=<STRING_LITERAL> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )+
      { n5.nodes.trimToSize(); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new Constant(n0); }
}
